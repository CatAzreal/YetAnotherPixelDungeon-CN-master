apply plugin: 'com.android.application'

android {
    compileSdkVersion 32

    sourceSets.main.assets.srcDirs = [new File(project(':app').projectDir, "/src/main/assets")]

    defaultConfig {
        manifestPlaceholders = [appName:"YAPDCN"]
        applicationId 'com.consideredhamster.yapdcn.android'

        versionCode 348
        versionName '0.3.3-cn1.34'

        minSdkVersion 14
        targetSdkVersion 33
    }

    buildTypes {
        debug {
            applicationIdSuffix ".indev"
            versionNameSuffix '-INDEV'
        }
        release {

            //These lines enable R8, which is a code shrinker/optimizer/obfuscator.
            //This makes release APKs smaller and more efficient, but also makes debugging trickier
            //as the information produced in stack traces must be de-obfuscated.
            //See here: https://developer.android.com/studio/build/shrink-code#decode-stack-trace
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

configurations { natives }

dependencies {
    implementation project(':app')

    implementation 'androidx.core:core:1.8.0'
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs()
    file("libs/armeabi-v7a/").mkdirs()
    file("libs/arm64-v8a/").mkdirs()
    file("libs/x86_64/").mkdirs()
    file("libs/x86/").mkdirs()

    configurations.natives.copy().files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}